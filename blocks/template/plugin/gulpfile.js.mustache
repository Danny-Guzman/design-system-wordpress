/**
 * External Dependencies
 */
const {task, src, dest}  = require('gulp'); // Gulp of-course.

// CSS related plugins.
const sass = require('gulp-sass')(require('sass')); // Gulp plugin for Sass compilation.

// JS related plugins.
const uglify = require('gulp-uglify-es').default; // Minifies JS files.

// Utility related plugins.
const del = require('del'); // Delete plugin
const lineec = require('gulp-line-ending-corrector'); // Consistent Line Endings for non UNIX systems. Gulp Plugin for Line Ending Corrector (A utility that makes sure your files have consistent line endings).
const concat = require('gulp-concat'); // Concatenates files.
var tap = require('gulp-tap');
var log = require('fancy-log');
var path = require('path');
const fs = require('fs'); // File System

/**
 * Internal Dependencies
 */
const {
    {{slugPascalCase}}CSS, 
    {{slugPascalCase}}JS 
} = require('./wpgulp.config.js');


/**
 * Task to build all {{title}} CSS/JS
 */
task('build', async function(){
	del(['js/*.js', 'css/*.css']);
	
	// build unminified files.
	build{{slugPascalCase}}CSS(false);
	build{{slugPascalCase}}JS(false);

	// build minified files.
	build{{slugPascalCase}}CSS();
	build{{slugPascalCase}}JS();
    

});

/**
 * Build {{title}} CSS file
 */
async function build{{slugPascalCase}}CSS(min = true){
	var buildOutputStyle = min ? 'compressed' : 'expanded';
	var minified = min ? '.min' : '';

	// {{title}} Front End CSS
	if ({{slugPascalCase}}CSS.length){
		src({{slugPascalCase}}CSS)
		.pipe(
			sass({
				outputStyle: buildOutputStyle,
			})
		)
		.pipe(lineec()) // Consistent Line Endings for non UNIX systems.
		.pipe(concat(`{{slug}}${minified}.css`)) // compiled file
		.pipe(tap(function (file) {
			log('[ ✅ {{slugPascalCase}}CSS Frontend ' + (min ? 'Minified CSS ] ' : 'CSS ] ') + path.basename(file.path) + ' was created successfully.');
		}))
		.pipe(dest('css/'))
	}

}

/**
 * Build {{title}} JS file
 */
async function build{{slugPascalCase}}JS(min = true){
	var minified = min ? '.min' : '';

	// {{title}} Front End JS
	if ({{slugPascalCase}}JS.length){

		let js = src({{slugPascalCase}}JS);

		if (min) {
			js = js.pipe(uglify());
		}

		js.pipe(lineec()) // Consistent Line Endings for non UNIX systems.
		.pipe(concat(`{{slug}}${minified}.js`)) // compiled file
		.pipe(tap(function (file) {
			log('[ ✅ {{title}} Frontend ' + (min ? 'Minified JS ] ' : 'JS ] ') + path.basename(file.path) + ' was created successfully.');
		}))
		.pipe(dest('js/'))
	
	}

}